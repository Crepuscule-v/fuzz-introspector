digraph "CFG for '_Z23count_uppercase_lettersPKhm' function" {
	label="CFG for '_Z23count_uppercase_lettersPKhm' function";

	Node0x555911a8b7b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{entry:\l  %data.addr = alloca i8*, align 8\l  %size.addr = alloca i64, align 8\l  %count = alloca i64, align 8\l  %i = alloca i64, align 8\l  store i8* %data, i8** %data.addr, align 8\l  store i64 %size, i64* %size.addr, align 8\l  store i64 0, i64* %count, align 8\l  store i64 0, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x555911a8b7b0 -> Node0x555911a8c320;
	Node0x555911a8c320 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.cond:                                         \l  %0 = load i64, i64* %i, align 8\l  %1 = load i64, i64* %size.addr, align 8\l  %cmp = icmp ult i64 %0, %1\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x555911a8c320:s0 -> Node0x555911a8c5c0;
	Node0x555911a8c320:s1 -> Node0x555911a8c640;
	Node0x555911a8c5c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.body:                                         \l  %2 = load i8*, i8** %data.addr, align 8\l  %3 = load i64, i64* %i, align 8\l  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %3\l  %4 = load i8, i8* %arrayidx, align 1\l  %conv = zext i8 %4 to i32\l  %cmp1 = icmp sge i32 %conv, 65\l  br i1 %cmp1, label %land.lhs.true, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x555911a8c5c0:s0 -> Node0x555911a8cd20;
	Node0x555911a8c5c0:s1 -> Node0x555911a8cda0;
	Node0x555911a8cd20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{land.lhs.true:                                    \l  %5 = load i8*, i8** %data.addr, align 8\l  %6 = load i64, i64* %i, align 8\l  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 %6\l  %7 = load i8, i8* %arrayidx2, align 1\l  %conv3 = zext i8 %7 to i32\l  %cmp4 = icmp sle i32 %conv3, 90\l  br i1 %cmp4, label %if.then, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x555911a8cd20:s0 -> Node0x555911a8d2b0;
	Node0x555911a8cd20:s1 -> Node0x555911a8cda0;
	Node0x555911a8d2b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{if.then:                                          \l  %8 = load i64, i64* %count, align 8\l  %inc = add i64 %8, 1\l  store i64 %inc, i64* %count, align 8\l  br label %if.end\l}"];
	Node0x555911a8d2b0 -> Node0x555911a8cda0;
	Node0x555911a8cda0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{if.end:                                           \l  br label %for.inc\l}"];
	Node0x555911a8cda0 -> Node0x555911a8ca10;
	Node0x555911a8ca10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.inc:                                          \l  %9 = load i64, i64* %i, align 8\l  %inc5 = add i64 %9, 1\l  store i64 %inc5, i64* %i, align 8\l  br label %for.cond, !llvm.loop !4\l}"];
	Node0x555911a8ca10 -> Node0x555911a8c320;
	Node0x555911a8c640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{for.end:                                          \l  %10 = load i64, i64* %count, align 8\l  ret i64 %10\l}"];
}
